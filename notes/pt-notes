### *Week 2*
##### _Vrijdag 14 februari 2020_

#### Command-line interface  (CLI)
Alternatief voor een GUI

Servers often have a CLI, not a GUI.

(Bash is a command language )

[~]$ rm -f foo.tx

[~]$    = promt
rm      = Command
-f      = option
foo.txt = Arguments

ls      = show files/print files
ls -a   = show hidden files (start with .)

cd      = navigate through files
cd ~    = shortcut naar user directory
cd ..   = map terug
cd ../a = een map terug en dan naar file a

mkdir   = nieuwe map/folder aanmaken

touch   = file aanmaken

pwd     = current directory
cmd k   = clear terminal
:q!     = quit whatever you are doing
rm      = remove
rm      = remove file
rm -r   = remove directory(map)
i -S    = package toevoegen 
cat     = concatenate (print) files
mv      = move file to other file (geeft hem een andere naam)
cp      = copy a file (from a.txt to b.txt)

echo    = console.log maar dan voor in de terminal
echo ~  = zie de folder waar je in zit (net als ls)

echo "Alpha" >> foo.txt = wanneer je een text wil printen in een file (append)


git init    = gelinkt met Git (bijv in je project folder)
git staus   = status van je Git files 
git add     = een file toevoegen
git add .   = alles 
git reset   = terug naar eerdere versie

.gitignore  = wanneer je een map of file niet wil meenemen in bijv je git add.
             _zet in de .gitignore file de files en mappen die je niet wil meenemen_
             
             
git commit -m ""    = defenitieve commit voor je files naar Git 
git log             = laat alle commits zien

git branch      = master branch, dit is ook wat je ziet op je life server
git checkout -b = kopie van master branch voor als je bijv features wil toevoegen
                  deze kan je gebruiken wanneer je nieuwe dingen wil proberen en niet
                  wil committen naar de master branch
                  
git push (naam repository) master  = 


.env        = word gebruikt voor vertouwelijke informatie die je moet gebruiken voor
              je website of app
             *.env zet je dus ook in je .gitignore file*


Wanneer er een spatie zit in je map naam, kan je twee dingen gebruiken:
* hello\ world
* hello_world

*DANGER* : Sudo Commando 
With this command you can do anything, even deleting data or maps.
_Be careful with this!!_


*Git is lokaal : GitHub zet je lokale bestanden online*
*Wanneer je je project in een serber wil zetten, kan je niet de GitHub desktop gebruiken, maar een command line in je Terminal met Git*



### *Week 4*
##### _Vrijdag 6 maart 2020_

#### Coding Standards

Code kwaliteit - Hoe definieer je dat?
_van slecht naar goed_
* De code ziet er complex, onlogisch en slordig uit en het werkt niet.
* De code ziet er slordig uit, maar werkt wel.
* De code ziet er goed en netjes uit, maar werkt niet.
* De code ziet er netjes uit en werkt goed.

Uiteindelijk ligt het ook aan de voorkeuren van de developer.

Je wil zo veel mogelijk verkomen dat er fouten zitten in je code die je niet meer kan vinden.

*Linters* - voor consistente code
_Een tool die jouw code analyseert en je waarschuwt wanneer er styliste of syntax fouten in zitten_

https://www.freecodecamp.org/forum/t/what-is-linting-code-linting-in-javascript-explained-with-example-tools/14680 


> Linting is the process of running a program that analyzes your code for programmatic and stylistic errors. A linting tool, or a linter, marks or flags any > > potential errors in your code such as syntax errors or incorrectly spelled variable names. This can save time and help you write better code.

> Linters will go through your code, and highlight

> formatting discrepancy
> non-adherence to coding standards and conventions
> pinpointing possible logical errors in your program
> Running a linter on your code makes sure it follows best practices, is readable and easy to maintain.

> Linters can be installed using npm or another package manager. Linters can be used from the command line by passing in files. Linters are also available as > plugins for tools and sometimes they are directly integrated into editors.

> Here are some popular JavaScript Linters:

> JSLint 10

> JSHint 4

> JSCS 3

> *ESLint 9*

> Linters for Editors :

> Visual Code : To Install the eslint extension, open command palette (View -> Command Paletteâ€¦ or cmd+shift+p ) and execute command: ext install eslint
> Tools and Plugins

> Prettier

* Extensie in je editor     = meteen feedback
* npm in your package.json  = git commit wordt afgebroken als er fouten inzitten
* or both - recommended

.editorconfig = ook een tool die helpt, maar helpt ook achter de schermen
*alleen voor indentatie, je wordt _niet_ gewaarschuwd bij veranderingen*


"rule": 
* "error",
* "warn",
* ["error",3]

- Kijk op de website bij ESLint en download een paar Best Practices

- Kijk naar de extensios die je misschien wil gebruiken voor je text-editor

- Update je Wiki met je research

MoSCow method gebruiken voor je Jobstory.
Probeer ook een lijst te maken van dingen die in je feature moeten zitten.

GIT KENNIS!

document.onload - eventlistener, als pagina geladen = event  
ajax - 


window.data = koppelen data van backend gekoppeld - beschikbaar voor frontend

app.get("/index", function(req, res){
  /*method .render beschikbaar gesteld door ejs op het response object*/
  res.render("index.ejs", {title: "hey", message: "bye"});
});

if else 


mongoDB


Database moet iets hebben doie ik kan ophalen naar frontend

notificatie document: type value


*NOTEs voor de feature...*
Notificaties

1 document voor notificaties met
- type (boost, likes, messages)
- Value

Backend data moet te zien zijn in frontend
.onload
window.data
Of met mongoDB (test data in database stoppen)

If else statement voor notificatie 
- is niet gelijk aan 0 = notificatie met value
- Is gelijk aan 0 = display hidden

De nav kan het doen zonder javascript, alleen css of zelfs alleen html.

