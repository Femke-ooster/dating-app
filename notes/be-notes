### *Week 2*
##### _Donderdag 13 februari 2020_

Recap

* node modules
* npm

* npm init (zeggen tegen een map: dit is een node project)
* npm install (depedencie met package en versie: 2.5.1 - major.minor.patch)

#### Server
Wanneer een client(web, app, game) iets opvraagt van de server.
Response is wanneer de server(machine) iets terug geeft.

developer.mozilla.org = verzoek van client
webpagina = response van de server



#### HTTP
_een pad_

Eigen http aanmaken gaat via onrequest.
Dan wordt er een port aangemaakt die wanneer je op jouw website wil, zal worden geopend.

Wanneer je een poort hebt aangemaakt, met een paar andere functies, kan je via node.js een server opnenen.

Met if else statements kan je met /about bijv een nieuwe pagina maken



#### Express
_maakt het makkelijker om features toe te voegen_

API: geeft toegang tot andere informatie die al eens is gegeven.

.get = method: iets wat jij als client wil hebben
app.get ('/', callback) = */* is een positie van een bestand of map
                          */movies*
                          */:id* is een identifier
                          */static* waar je direct naartoe kan zonder het pad te hoeven volgen, het is een open bestand zonder gatekeeper
                          Dit is dan toegankelijk voor iedereen ook de client.

.post = wanneer een client iets wil sturen naar een server

.delete = wanneer een client iets wil verwijderen



#### Terminal

spatie = \
map omhoog = cd ..

node index.js
> Hello World!


### *Week 3*
##### _Donderdag 13 februari 2020_

#### HTTP & server

http://test.example.com:3000/users/search?q=test&w=all#result

Protocol  -
Subdomain -
Domain    -
Port      -
Path      -
Query     - data die de server tegug geeft aan de client
Fragment  - data

*HTTP = metadata van een verzoek*

Create: POST,PUT      - sturen van data
Read  : GET           - ontvangen van data
Update: PATCH
Delete: DELETE

Afspraken tussen servers en browsers met bijvoorbeeld een 404
Zo kan de client duidelijk zien wat er aan de hand is


Mine type - content type tag
Die heb je nodig zodat de client weet wat voor data binnen komt

text/html
text = type
html =

*Server*

URL uitlezen met req.url

_Duidelijke communicatie voor de client is het beroep van een backender die werkt met de server._

Express maakt het serverbouwen makkelijker.

Static = een verzoek wat de client doet zonder controle te hoeven doen.
Handig wanneer je ook CSS meesturen zonder het te controleren.
Dus zonder toegang of controle van de server.
*_Het bestand is publiekelijk beschikbaar_*

app.use('/static', express.static('public'));
Zet dit in je js als je de pagina statisch wil maken.


app.get("/", callback)
Method = get
Path  = "/"


Template Engine = via npm
Use static template files for you website.

*In de Terminal*
* Naar de map die je wil gebruiken
* npm init
* npm install express --save

*In je index.js*

const express = require('express');
const app = express();
const port = 8000;

app.use("/static", express.static(__dirname + "/static")); /**/

app.get("/", (req, res) => {
  res.write("<p>Hello!<p>");
  res.end();
});

app.get("/about", (req, res) => {
  res.write("<p>Over mij<p>");
  res.end();
});

app.listen(port, () => console.log("Running my NodeJS server at"));

*server opstarten in terminal:*
node index.js


### *Week 3*
##### _Donderdag 27 februari 2020_

#### Templating
_HTML mengen met data_

Store HTML outside of JS

* HandleBars
* EJS

index.ejs = eigenlijk een html bestand

Wat je ziet in de browser:
<h1>
My cool Website
</h1>

Wat je ziet in de server:
<h1>
<%= title %>
</h1>

<% JavaScript code %>

Bijvoorbeeld:

Als je een bestand hebt head.ejs met de code die je gebruikt in je header,
kan je deze herhalen in je andere bestanden met:

> <% include head.ejs %>


app.set ('view engine', 'ejs')
app.set ('views', 'views')      - views in map views

res.render('home.ejs', data)    - er wordt data gekoppeld naar home.EJS

res.status(404).render('home.ejs', data) - 404 wordt gekoppeld naar je pagina


<%= name %> wordt gekoppeld met {name:'hallo'}

### *Week 4*
##### _Maandag 2 maart 2020_

#### Data

Je kan voor het ophalen van data een moeilijke manier,
maar het kan ook via ejs

met bijvoorbeel:
> <% for(var i = 0, i data.lenght; i++) { %>

#### form

Via een post iets sturen naar de server =
> <form action=""/add-movie" name="title" method=post>

de titel wordt gestuurd naar de pagina add movie door middel van een post

* voeg toe: npm install slug body-parser

slug - speciale tekens niet toegang
body-parser - maakt de data makkelijker te filteren

req.body - data verstuurd door de client
res.redirect - naar een route



app.use     = file die je mag gebruiken
 - app.use("/static", express.static(__dirname + "/static"));
 
app.set     = zet de mapjes waar je je template kan vinden
 - app.set("views", "views");
 
app.get     = client die verzoek doet
 - app.get("/", function(req, res){})
 
app.listen  =
app.delete  =
app.post  =

res = sturen naar client: methods
req = ontvangen van

res.render  = tik in de pagina die je wil laten zien
res.write   =
res.end     =
res.status  =
res.open    =
res.onload  =
res.send    =

window.location =



post een movies
redirect naar een nieuwe webpagina
vind die pagina terug

film verwijderen
params - aan het einde van je URL

xhr
fetch


### *Week 4*
##### _Maandag 5 maart 2020_

#### File
_Afbeeldingen sturen_

npm install multer
* alle bestanden die de client stuurt -> static/uploads

method= post
enctype='multipart/form-data'
^
Zo kan je 

<input name'cover' type='file' accept='image/*'>
- img upload van alle types


app.post('/add-movie', function(req, res){
  console.log(req.body)
  res.end()
})


### *Week 5*
##### _Donderdag 27 februari 2020_

#### SQL

NoSQL

MongoDB
Data opslaan maar niet in tabel, maar alles in een schema alles op een hoop.
- gebruikt js syntax dus dezelfde taal
- handige methods - method-reduce
als je mongodb download wordt je laptop een database 

hoe werkt het met node?

npm install mongodb
npm install dotenv

- maak een bestand aan: .env
zet daar alle dinegen in die je nodig hebt
- port is altijd 27017
Deze bestanden wil je *niet* op github zetten (met .gitignore)
zet daar alle info op die iemamd anders niet nodig zou moeten hebben

*mongoDB atlas*,
je hebt een login waardoor je altijd een databese hebt, zelfs als het niet op je laptop is

ip adress toevoegen op school en thuis

*in .env* 
db_user

DB_HOST=url
DB_PORT=27017
DB_NAME=

process.env.db_user


*compass* - visueel overzicht van je database

mongobd:// = een link naar je database

.collection - tabel waar info in kan

.find - alles dat teruggeven wordt (alles terug uit connectie)
.findOne - zoek een specifiek deel ()

.insertOne - een heel object opslaan in je database

wat doet renderen precies?

### *Week 5*
##### _Donderdag 12 maart 2020_

.gitignore toevoegen
compass app downloaden

mongoose voor simpele data - optioneel

#### Sessions
_cookies_

Beveiliging

sessions: cookies opslaan bij clients
cookie opslaan in browser

bijv: niet inloggen, maar wel onthouden wat er in je winkelmandje zit

npm install express-session

cookie kan voor een bepaalde data voor een tijdje automatisch voor je invullen
dus, niet steeds opnieuw inloggen

*In je .env*
SESSION_SECRET=ilikecats
Geheime code die alleen je server weet

test of het werkt:
open browser - network - cookie









